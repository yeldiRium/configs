#+TITLE: Emacs Configuration
#+OPTIONS: H:3
#+OPTIONS: toc:2

* custom functions
** assert that package is installed
   #+BEGIN_SRC emacs-lisp
     (defun ye/assert-package-installed (package-name)
       "Check if the given package is installed and throw an error if not."
       (unless (require package-name nil 'noerror)
	 (error
	   (format
	     "Package %s is not installed! Please `package-install %s` to proceed."
	     package-name
	     package-name
	     )
	   )
	 )
       )
   #+END_SRC

** move lines up/down
   [[http://emacsredux.com/blog/2013/04/02/move-current-line-up-or-down/][Move current line up or down - Emacs Redux]]
   #+BEGIN_SRC emacs-lisp
     (defun move-line-up ()
       "Move up the current line."
       (interactive)
       (transpose-lines 1)
       (forward-line -2)
       (indent-according-to-mode))

     (defun move-line-down ()
       "Move down the current line."
       (interactive)
       (forward-line 1)
       (transpose-lines 1)
       (forward-line -1)
       (indent-according-to-mode))
   #+END_SRC

* emacs configuration
** Backup files
   #+BEGIN_SRC emacs-lisp
     (setq
	backup-by-copying t      ; don't clobber symlinks
	backup-directory-alist
	 '(("." . "~/.emacs.d/backups/"))    ; don't litter my fs tree
	delete-old-versions t
	kept-new-versions 6
	kept-old-versions 2
	version-control t)       ; use versioned backups
   #+END_SRC
** keybindings
*** bind window movement to meta+<arrow keys>
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-<up>") 'windmove-up)
      (global-set-key (kbd "s-<right>") 'windmove-right)
      (global-set-key (kbd "s-<down>") 'windmove-down)
      (global-set-key (kbd "s-<left>") 'windmove-left)
    #+END_SRC

*** bind [[move lines up/down][move lines up/down]]
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-S-<up>") 'move-line-up)
      (global-set-key (kbd "M-S-<down>") 'move-line-down)
    #+END_SRC

*** bind revert-buffer to meta-r
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "M-r") 'revert-buffer)
    #+END_SRC

*** osx special
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(ns-right-alternate-modifier 'none))
    #+END_SRC

** package archives
   Load emacs 24's package system and add MELPA repository.
   #+BEGIN_SRC emacs-lisp
     (when (>= emacs-major-version 24)
       (require 'package)
       (add-to-list
	'package-archives
	'("melpa" . "http://melpa.milkbox.net/packages/")
	t))
   #+END_SRC

** enable packages
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      '(package-selected-packages (quote (
					  company
					  expand-region
					  htmlize
					  monokai-theme
					  multiple-cursors
					  neotree
					  nlinum
					  org
					  org-sticky-header
					  org-web-tools
					  org-bullets
					  ox-reveal
					  spaceline
					  telega))))
   #+END_SRC

** initialize packages
   Initialize installed packages for further use.
   #+BEGIN_SRC emacs-lisp
     (package-initialize)
   #+END_SRC

** set theme
   #+BEGIN_SRC emacs-lisp
     (custom-set-variables
      ;; custom-set-variables was added by Custom.
      ;; If you edit it by hand, you could mess it up, so be careful.
      ;; Your init file should contain only one such instance.
      ;; If there is more than one, they won't work right.
      '(custom-enabled-themes '(monokai))
      '(custom-safe-themes
	'("bd7b7c5df1174796deefce5debc2d976b264585d51852c962362be83932873d9" default)))
   #+END_SRC

* core packages
** whitespace-mode
*** initialization
    #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook 'global-whitespace-mode)
    #+END_SRC

*** variables
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(whitespace-style '(face tabs)))
    #+END_SRC

** dired
***  keybindings
    #+BEGIN_SRC emacs-lisp
     (add-hook
      'dired-mode-hook
      (lambda ()
	(local-set-key (kbd "M-<down>") 'dired-find-file)
	(local-set-key (kbd "M-<up>") 'dired-up-directory)))
    #+END_SRC

** docview
*** variables
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(doc-view-continuous t))
    #+END_SRC

* external packages
** various install checks
   Install checks for packages I want to have installed, but which have no
   dedicated configuration section.
   These are probably configured as [[enable packages][enabled packages]].
   #+BEGIN_SRC emacs-lisp
     (mapc
      'ye/assert-package-installed
      '(
       htmlize
       monokai-theme
       spaceline
       org-web-tools))
   #+END_SRC

** org-mode
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'org)
    #+END_SRC

*** variables
**** set export settings
     #+BEGIN_SRC emacs-lisp
       (custom-set-variables
	'(user-full-name   "Hannes Leutloff")
	'(user-mail-adress "hannes.leutloff@aol.de"))
     #+END_SRC

**** set agenda files
     #+BEGIN_SRC emacs-lisp
       (custom-set-variables
	'(org-agenda-files '(
			     "~/workspace/todo.org"
			     "~/querbeet/notes/efla.org")))
     #+END_SRC

**** disable confirmation for inline script execution
     #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(org-confirm-babel-evaluate nil))
     #+END_SRC

**** allow selection with the shift key while outside special contexts
     #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(org-support-shift-select t))
     #+END_SRC

**** set todo keywords
     #+BEGIN_SRC emacs-lisp
       (custom-set-variables
	'(org-todo-keywords
	  '((sequence "TODO" "WAITING" "MAYBE" "DELEGATED" "|" "DONE"))))
     #+END_SRC

*** keybindings
**** org-agenda
     #+BEGIN_SRC emacs-lisp
       (add-hook
	'org-mode-hook
	(lambda ()
	  (local-set-key (kbd "C-c a") 'org-agenda)))
     #+END_SRC
**** org-store-link
     #+BEGIN_SRC emacs-lisp
       (add-hook
	'org-mode-hook
	(lambda ()
	  (local-set-key (kbd "C-c l") 'org-store-link)))
     #+END_SRC

*** babel languages
**** activate inline evaluation
     - JavaScript
     - Python
     #+BEGIN_SRC emacs-lisp
       (org-babel-do-load-languages
	'org-babel-load-languages
	'((js . t)
	  (python . t)
	  ))
     #+END_SRC

**** activate syntax highlighting in latex
     This requires
     - latex
     - minted (latex plugin)
     - python
     - pygments (python package)
     to be installed.
     #+BEGIN_SRC emacs-lisp
       (require 'ox-latex)
       (add-to-list 'org-latex-packages-alist '("" "minted"))
       (custom-set-variables
	'(org-latex-listings 'minted)
	'(org-latex-pdf-process '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f")))
     #+END_SRC

** org-sticky-header
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'org-sticky-header)
    #+END_SRC

*** initialization
   #+BEGIN_SRC emacs-lisp
     (add-hook 'org-mode-hook 'org-sticky-header-mode)
   #+END_SRC

** org-bullets
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'org-bullets)
    #+END_SRC

*** initialization
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook 'org-bullets-mode)
    #+END_SRC

** ox-reveal
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'ox-reveal)
    #+END_SRC
    The MELPA version of ox-reveal is broken as of <2018-09-07 Fri>.
    See [[https://github.com/yjwen/org-reveal/issues/342][this Issue]].

    Instead of installing from MELPA do the following:
    - download [[https://github.com/yjwen/org-reveal/blob/master/ox-reveal.el][ox-reveal.el]] from github
    - change org version requirement in =ox-reveal.el= to =9.1=
    - install via =package-install-file "path/to/ex-reveal.el"=
    - optionally delete the file

*** initialization
    #+BEGIN_SRC emacs-lisp
      (add-hook 'org-mode-hook (lambda () (load-library "ox-reveal")))
    #+END_SRC

*** variables
    #+BEGIN_SRC emacs-lisp
      (custom-set-variables
       '(org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/"))
    #+END_SRC

** ox-textile
*** info
    provides org export to textile format

*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'ox-textile)
    #+END_SRC

** company
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'company)
    #+END_SRC

*** initialization
    Activate company globally.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook 'global-company-mode)
    #+END_SRC

*** key bindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "s-<return>") 'company-complete)
    #+END_SRC

** nlinum
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'nlinum)
    #+END_SRC

*** initialization
    Activate nlinum globally.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook 'global-nlinum-mode)
    #+END_SRC

** expand-region
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'expand-region)
    #+END_SRC

*** key bindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-d") 'er/expand-region)
    #+END_SRC

** multiple-cursors
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'multiple-cursors)
    #+END_SRC

*** key bindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C->") 'mc/mark-next-like-this)
      (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
      (global-set-key (kbd "C-=") 'mc/mark-all-like-this)
      (global-set-key (kbd "C-S-<mouse-1>") 'mc/add-cursor-on-click)
    #+END_SRC

** spaceline
*** info
    [[https://github.com/TheBB/spaceline][GitHub - TheBB/spaceline: Powerline theme from Spacemacs]]

*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'spaceline)
    #+END_SRC

*** initialize
    #+BEGIN_SRC emacs-lisp
      (add-hook 'after-init-hook 'spaceline-emacs-theme)
    #+END_SRC

** web-mode
*** info
    Web-mode provides smart html, css and js syntax highlighting and some
    extras. It provides functions for semantically collapsing and jumping
    elements.
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'web-mode)
    #+END_SRC

*** variables
    Use web-mode in html files.
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    #+END_SRC

** emmet-mode
*** info
    Emmet-mode enables templating strings of the form "html>head>title", which
    can be expanded into html markup.

*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'emmet-mode)
    #+END_SRC

*** initialization
    Sgml contains html, xml and other markup languages.
    #+BEGIN_SRC emacs-lisp
      (add-hook 'web-mode-hook 'emmet-mode)
      (add-hook 'web-mode-hook 'emmet-mode)
    #+END_SRC

** yaml-mode
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'yaml-mode)
    #+END_SRC

** magit
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'ghub)
      (ye/assert-package-installed 'magit)
    #+END_SRC
*** config
    #+BEGIN_SRC emacs-lisp
       '(magit-commit-arguments
	 (quote
	  ("--gpg-sign=11B87CD2FC7C637C1784910D4F85FF8648EBF971")))
    #+END_SRC
*** global magit binding
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC

** neotree
*** install check
    #+BEGIN_SRC emacs-lisp
      (ye/assert-package-installed 'neotree)
    #+END_SRC
*** keybindings
    #+BEGIN_SRC emacs-lisp
      (global-set-key [f8] 'neotree-toggle)
    #+END_SRC
** telega
*** load
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'load-path "~/querbeet/workspace/vendor/telegram/telega.el")
      (require 'telega)
    #+END_SRC
